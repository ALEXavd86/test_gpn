import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import io
import logging
import plotly.express as px

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="MVP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã—Ä—É—á–∫–∏", layout="wide")
st.title("üìä MVP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Å–ø–æ—Ä—Ç–Ω–æ–π –≤—ã—Ä—É—á–∫–∏")
st.markdown("---")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
if 'df' not in st.session_state:
    st.session_state.df = None
if 'clean_log' not in st.session_state:
    st.session_state.clean_log = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def clean_data(df):
    """
    –û—á–∏—â–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π DataFrame –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª ved_export_sample.csv.
    """
    log = {}
    df_clean = df.copy()

    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    log['initial_rows'] = len(df_clean)
    log['initial_columns'] = list(df_clean.columns)

    # 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –ª–∞—Ç–∏–Ω–∏—Ü–µ –∏ –∑–∞–º–µ–Ω–µ –ø—Ä–æ–±–µ–ª–æ–≤/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    new_columns = {
        '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç': 'contractor',
        '–°—É–¥–Ω–æ': 'vessel',
        '–°—Ç—Ä–∞–Ω–∞': 'country',
        '–ò–ù–ö–û–¢–ï–†–ú–°': 'incoterms',
        '–ë–∞–Ω–∫': 'bank',
        '–ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂': 'sales_channel',
        '–ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞': 'invoice_id',
        '–î–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞ –∏–ª–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏': 'invoice_date',
        '–°—É–º–º–∞ –∏–Ω–≤–æ–π—Å–∞': 'invoice_amount',
        '–í–∞–ª—é—Ç–∞ –∏–Ω–≤–æ–π—Å–∞': 'invoice_currency',
        '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞': 'status',
        '–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è': 'payment_date',
        '–°—É–º–º–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã': 'payment_amount',
        '–∫—Ä–æ—Å—Å-–∫—É—Ä—Å': 'cross_rate',
        '–ú–µ–Ω–µ–¥–∂–µ—Ä': 'manager',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': 'comment'
    }
    df_clean.rename(columns=new_columns, inplace=True)
    log['columns_renamed'] = list(df_clean.columns)

    # 2. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ 'invoice_id'
    duplicates = df_clean.duplicated(subset=['invoice_id'], keep='first').sum()
    df_clean = df_clean.drop_duplicates(subset=['invoice_id'], keep='first')
    log['duplicates_removed'] = duplicates

    # 3. –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    date_columns = ['invoice_date', 'payment_date']
    for col in date_columns:
        if col in df_clean.columns:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç, –¥–µ–Ω—åfirst –≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å
            df_clean[col] = pd.to_datetime(df_clean[col], errors='coerce', dayfirst=True)
            invalid_dates = df_clean[col].isna().sum()
            log[f'{col}_invalid_dates'] = invalid_dates

    # 4. –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—É–º–º (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
    amount_columns = ['invoice_amount', 'payment_amount']
    for col in amount_columns:
        if col in df_clean.columns:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç—ã–µ, —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç, –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            df_clean[col] = (
                df_clean[col]
                .astype(str)
                .str.replace('‚âà', '', regex=False)  # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
                .str.replace('usd', '', case=False, regex=False)  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç 'usd'
                .str.replace(',', '.', regex=False)  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
                .str.replace(' ', '', regex=False)   # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
                .str.replace('‚ÇΩ', '', regex=False)   # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª —Ä—É–±–ª—è
                .str.replace('$', '', regex=False)   # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–æ–ª–ª–∞—Ä–∞
            )
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –æ—à–∏–±–∫–∏ —Å—Ç–∞–Ω—É—Ç NaN
            df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce')
            invalid_amounts = df_clean[col].isna().sum()
            log[f'{col}_invalid_values'] = invalid_amounts

    # 5. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–∞ –º–µ–¥–∏–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    if 'cross_rate' in df_clean.columns:
        median_rate = df_clean['cross_rate'].median()
        null_cross_rates = df_clean['cross_rate'].isna().sum()
        df_clean['cross_rate'] = df_clean['cross_rate'].fillna(median_rate)
        log['cross_rate_nulls_filled'] = null_cross_rates
        log['cross_rate_median_value'] = median_rate

    # 6. –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π –∫ –µ–¥–∏–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
    string_columns = ['status', 'contractor', 'country', 'manager']
    for col in string_columns:
        if col in df_clean.columns:
            df_clean[col] = df_clean[col].astype(str).str.strip().str.lower()
            log[f'{col}_normalized'] = True

    log['final_rows'] = len(df_clean)
    return df_clean, log

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∏—Å–∫–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
def calculate_risk_score(row):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞ (0-100) –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏.
    """
    score = 0
    today = pd.Timestamp.now().normalize()

    # 1. –ü—Ä–æ—Å—Ä–æ—á–∫–∞ (—Å—á–∏—Ç–∞–µ–º due_date = invoice_date + 30 –¥–Ω–µ–π)
    if pd.notna(row.get('invoice_date')):
        due_date = row['invoice_date'] + pd.Timedelta(days=30)
        days_overdue = (today - due_date).days
        if days_overdue > 0:
            score += 50  # –ë–∞–∑–æ–≤—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É
            score += min(days_overdue * 5, 50)  # –î–æ–ø. —à—Ç—Ä–∞—Ñ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

    # 2. –ö—Ä—É–ø–Ω—ã–π –∏–Ω–≤–æ–π—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –≤ RUB)
    if 'amount_rub' in row and row['amount_rub'] > df_clean['amount_rub'].median():
        score += 10

    # 3. –°—Ç–∞—Ç—É—Å
    status = row.get('status', '')
    if status not in ['–æ–ø–ª–∞—á–µ–Ω', 'closed', 'paid']:
        score += 15

    # 4. –°—Ç—Ä–∞–Ω–∞ (–ø—Ä–∏–º–µ—Ä: —Å—á–∏—Ç–∞–µ–º '–µ–≥–∏–ø–µ—Ç' —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–π)
    if row.get('country') == '–µ–≥–∏–ø–µ—Ç':
        score += 15

    return min(score, 100)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-–æ—Ç—á–µ—Ç–∞
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-–æ—Ç—á–µ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
def create_excel_report(df, kpi_data):
    """
    –°–æ–∑–¥–∞–µ—Ç Excel-–æ—Ç—á–µ—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏.
    """
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        # –õ–∏—Å—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É amount_rub)
        df_to_export = df.copy()
        if 'amount_rub' not in df_to_export.columns:
            df_to_export['amount_rub'] = df_to_export.apply(
                lambda x: x['invoice_amount'] * x['cross_rate'] if x['invoice_currency'] != 'RUB' else x['invoice_amount'],
                axis=1
            )
        df_to_export.to_excel(writer, sheet_name='–î–∞–Ω–Ω—ã–µ', index=False)

        # –õ–∏—Å—Ç —Å —Ä–∏—Å–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –∏–Ω–≤–æ–π—Å—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º)
        high_risk_df = df_to_export[df_to_export['risk_score'] >= 50]
        high_risk_df.to_excel(writer, sheet_name='–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫', index=False)

        # –õ–∏—Å—Ç —Å KPI
        kpi_df = pd.DataFrame.from_dict(kpi_data, orient='index', columns=['–ó–Ω–∞—á–µ–Ω–∏–µ'])
        kpi_df.to_excel(writer, sheet_name='KPI')

        # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        workbook = writer.book
        worksheet_risk = writer.sheets['–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫']

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª–∏—Å—Ç–∞ —Å —Ä–∏—Å–∫–∞–º–∏
        red_format = workbook.add_format({'bg_color': '#FFC7CE'})
        worksheet_risk.conditional_format('A1:Z1000', {'type': 'formula',
                                                       'criteria': '=$F1>=70',
                                                       'format': red_format})

    processed_data = output.getvalue()
    return processed_data

# --- INTERFACE ---

# –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)", type=["csv", "xlsx"])

if uploaded_file is not None:
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file, encoding='utf-8')
        else:
            df = pd.read_excel(uploaded_file)

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        with st.spinner('–û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ...'):
            df_clean, clean_log = clean_data(df)
            st.session_state.df = df_clean
            st.session_state.clean_log = clean_log

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—á–∏—â–µ–Ω—ã!")
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"):
            st.json(clean_log)

        # –†–∞—Å—á–µ—Ç –º–µ–¥–∏–∞–Ω—ã –¥–ª—è —Å—É–º–º—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        median_amount = df_clean['amount'].median() if 'amount' in df_clean.columns else 0

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª–∏ –¥–ª—è –≤—Å–µ–≥–æ DataFrame
        df_clean['amount_rub'] = df_clean.apply(
            lambda x: x['invoice_amount'] * x['cross_rate'] if x['invoice_currency'] != 'RUB' else x['invoice_amount'],
            axis=1
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å —Ä–∏—Å–∫–æ–º
        with st.spinner('–†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫–∏...'):
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ —É—á–µ—Ç–∞ —Å—É–º–º—ã
            df_clean['risk_score'] = df_clean.apply(calculate_risk_score, axis=1)
            # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∏—Å–∫ –∑–∞ –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É
            if 'amount' in df_clean.columns:
                df_clean.loc[df_clean['amount'] > median_amount, 'risk_score'] += 10
                df_clean['risk_score'] = df_clean['risk_score'].clip(0, 100)

        # --- –ë–õ–û–ö –§–ò–õ–¨–¢–†–û–í ---
        st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∏—Å–∫—É
        min_risk = st.sidebar.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫", 0, 100, 50)
        df_filtered = df_clean[df_clean['risk_score'] >= min_risk]

        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ
        if 'country' in df_filtered.columns:
            countries = ['–í—Å–µ'] + list(df_filtered['country'].unique())
            selected_country = st.sidebar.selectbox("–°—Ç—Ä–∞–Ω–∞", countries)
            if selected_country != '–í—Å–µ':
                df_filtered = df_filtered[df_filtered['country'] == selected_country]

        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if 'status' in df_filtered.columns:
            statuses = ['–í—Å–µ'] + list(df_filtered['status'].unique())
            selected_status = st.sidebar.selectbox("–°—Ç–∞—Ç—É—Å", statuses)
            if selected_status != '–í—Å–µ':
                df_filtered = df_filtered[df_filtered['status'] == selected_status]

        # --- –ë–õ–û–ö KPI ---
        st.header("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        col1, col2, col3, col4 = st.columns(4)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        total_expected = 0
        total_overdue = 0
        total_amount = 0
        overdue_ratio = 0
        total_invoices = len(df_filtered)
        top_debtors = pd.DataFrame()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –¥–∞—Ç–æ–π –æ–ø–ª–∞—Ç—ã
        df_filtered['due_date'] = df_filtered['invoice_date'] + pd.Timedelta(days=30)

        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        today = datetime.now()

        # –†–∞—Å—á–µ—Ç KPI —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç
        if 'invoice_amount' in df_filtered.columns and 'invoice_currency' in df_filtered.columns:

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            df_filtered['amount_rub'] = df_filtered.apply(
                lambda x: x['invoice_amount'] * x['cross_rate'] if x['invoice_currency'] != 'RUB' else x[
                    'invoice_amount'],
                axis=1
            )

            # –û–ñ–ò–î–ê–ï–ú–ê–Ø –í–´–†–£–ß–ö–ê: —Å—É–º–º–∞ –≤—Å–µ—Ö –ù–ï–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤
            unpaid_mask = (~df_filtered['status'].isin(['–æ–ø–ª–∞—á–µ–Ω', 'paid', 'closed']))
            total_expected = df_filtered.loc[unpaid_mask, 'amount_rub'].sum()

            # –°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–≤ RUB)
            overdue_mask = (df_filtered['due_date'] < today)
            total_overdue = df_filtered.loc[overdue_mask, 'amount_rub'].sum()

            # –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –∏–Ω–≤–æ–π—Å–æ–≤ (–≤ RUB)
            total_amount = df_filtered['amount_rub'].sum()

            # –î–æ–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö
            if total_amount > 0:
                overdue_ratio = (total_overdue / total_amount) * 100

            # –¢–æ–ø-5 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ (–≤ RUB)
            if 'contractor' in df_filtered.columns:
                overdue_df = df_filtered[df_filtered['due_date'] < today]
                if not overdue_df.empty:
                    top_debtors = overdue_df.groupby('contractor')['amount_rub'].sum().nlargest(5).reset_index()
                    top_debtors.columns = ['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', '–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (RUB)']

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ KPI
        with col1:
            st.metric("–í—Å–µ–≥–æ –∏–Ω–≤–æ–π—Å–æ–≤", total_invoices)
        with col2:
            st.metric("–û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_expected:,.0f} ‚ÇΩ")
            st.caption("–°—É–º–º–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤")
        with col3:
            st.metric("–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏", f"{total_overdue:,.0f} ‚ÇΩ")
        with col4:
            st.metric("–î–æ–ª—è –ø—Ä–æ—Å—Ä–æ—á–∫–∏", f"{overdue_ratio:.1f}%")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        with st.expander("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
            col11, col22, col33 = st.columns(3)

            with col11:
                paid_mask = (df_filtered['status'].isin(['–æ–ø–ª–∞—á–µ–Ω', 'paid', 'closed']))
                paid_amount = df_filtered.loc[paid_mask, 'amount_rub'].sum()
                st.metric("–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã", f"{paid_amount:,.0f} ‚ÇΩ")

            with col22:
                unpaid_count = len(df_filtered[~df_filtered['status'].isin(['–æ–ø–ª–∞—á–µ–Ω', 'paid', 'closed'])])
                st.metric("–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã", unpaid_count)

            with col33:
                overdue_count = len(df_filtered[df_filtered['due_date'] < today])
                st.metric("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã", overdue_count)

        # –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –¢–û–ü–ê –î–û–õ–ñ–ù–ò–ö–û–í
        if not top_debtors.empty:
            st.subheader("–¢–æ–ø-5 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (–≤ —Ä—É–±–ª—è—Ö)")
            st.dataframe(top_debtors, use_container_width=True)

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            fig = px.bar(top_debtors,
                         x='–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç',
                         y='–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (RUB)',
                         title='–¢–æ–ø-5 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏',
                         color='–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç')
            st.plotly_chart(fig, use_container_width=True)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –≤–∞–ª—é—Ç–∞–º (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
            st.subheader("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–≥–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º (–≤ —Ä—É–±–ª—è—Ö)")
            if 'contractor' in df_filtered.columns:
                currency_debt = df_filtered[df_filtered['due_date'] < today]
                if not currency_debt.empty:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É –∏ —Å—É–º–º–∏—Ä—É–µ–º –≤ —Ä—É–±–ª—è—Ö
                    currency_breakdown = currency_debt.groupby('contractor')['amount_rub'].sum().reset_index()
                    currency_breakdown.columns = ['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', '–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (RUB)']
                    currency_breakdown['–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (RUB)'] = currency_breakdown['–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (RUB)'].round(2)

                    st.dataframe(currency_breakdown, use_container_width=True)
                else:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–≥–æ–≤")
            else:
                st.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏")

        else:
            st.info("–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤.")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–∞—Ö
        with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–∞—Ö –∏ –∫—É—Ä—Å–∞—Ö"):
            st.write("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:**")
            if 'invoice_currency' in df_filtered.columns and 'cross_rate' in df_filtered.columns:
                currency_rates = df_filtered.groupby('invoice_currency')['cross_rate'].mean().round(4)
                st.write(currency_rates)

            st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º:**")
            if 'invoice_currency' in df_filtered.columns:
                currency_counts = df_filtered['invoice_currency'].value_counts()
                st.write(currency_counts)

            st.write("**–°—Ç–∞—Ç—É—Å—ã –∏–Ω–≤–æ–π—Å–æ–≤:**")
            if 'status' in df_filtered.columns:
                status_counts = df_filtered['status'].value_counts()
                st.write(status_counts)

        # ... (–ø–æ—Å–ª–µ –±–ª–æ–∫–∞ —Å KPI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ app.py)

        # --- –ü–†–û–í–ï–†–ö–ê –ì–ò–ü–û–¢–ï–ó ---
        st.header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        hypothesis_df = df_clean.copy()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É due_date –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        hypothesis_df['due_date'] = hypothesis_df['invoice_date'] + pd.Timedelta(days=30)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
        hypothesis_df['is_overdue'] = (hypothesis_df['due_date'] < datetime.now()) & (
            ~hypothesis_df['status'].isin(['–æ–ø–ª–∞—á–µ–Ω', 'paid', 'closed']))

        if 'country' in hypothesis_df.columns:

            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º - –ò–°–ü–û–õ–¨–ó–£–ï–ú RUB
            country_overdue = hypothesis_df.groupby('country').agg(
                total_invoices=('invoice_id', 'count'),
                overdue_invoices=('is_overdue', 'sum'),
                avg_invoice_amount_rub=('amount_rub', 'mean')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É–±–ª–∏
            ).round(2)

            # –†–∞—Å—á–µ—Ç –¥–æ–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–∫
            country_overdue['overdue_ratio'] = (country_overdue['overdue_invoices'] / country_overdue[
                'total_invoices']) * 100
            country_overdue['overdue_ratio'] = country_overdue['overdue_ratio'].round(2)

            # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Å—É–º–º—ã –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –≤ RUB
            overdue_df = hypothesis_df[hypothesis_df['is_overdue'] == True]
            if not overdue_df.empty:
                country_overdue_amount = overdue_df.groupby('country')['amount_rub'].mean().round(2)
                country_overdue = country_overdue.join(country_overdue_amount.rename('avg_overdue_amount_rub'))
            else:
                country_overdue['avg_overdue_amount_rub'] = 0

            st.subheader("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (—Å—É–º–º—ã –≤ RUB)")
            st.dataframe(country_overdue.sort_values('overdue_ratio', ascending=False))

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            col1, col2 = st.columns(2)

            with col1:
                st.write("–î–æ–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (%)")
                fig1 = px.bar(country_overdue.sort_values('overdue_ratio', ascending=False).reset_index(),
                              x='country', y='overdue_ratio',
                              title='–î–æ–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º')
                st.plotly_chart(fig1, use_container_width=True)

            with col2:
                st.write("–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∏–Ω–≤–æ–π—Å–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (RUB)")
                fig2 = px.bar(country_overdue.sort_values('avg_invoice_amount_rub', ascending=False).reset_index(),
                              x='country', y='avg_invoice_amount_rub',
                              title='–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∏–Ω–≤–æ–π—Å–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (RUB)')
                st.plotly_chart(fig2, use_container_width=True)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
            st.subheader("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –¥–æ–ª–µ–π –ø—Ä–æ—Å—Ä–æ—á–µ–∫
            if not country_overdue.empty:
                highest_risk_country = country_overdue['overdue_ratio'].idxmax()
                highest_risk_ratio = country_overdue['overdue_ratio'].max()
                median_ratio = country_overdue['overdue_ratio'].median()

                st.write(f"**–ì–∏–ø–æ—Ç–µ–∑–∞:** –ò–Ω–≤–æ–π—Å—ã –∏–∑ {highest_risk_country} –∏–º–µ—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–∫–∏")

                if highest_risk_ratio > median_ratio * 1.5:  # –ù–∞ 50% –≤—ã—à–µ –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    st.success(
                        f"‚úÖ –ì–∏–ø–æ—Ç–µ–∑–∞ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê**: {highest_risk_country} –∏–º–µ–µ—Ç –¥–æ–ª—é –ø—Ä–æ—Å—Ä–æ—á–µ–∫ {highest_risk_ratio}%, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ({median_ratio}%)")
                elif highest_risk_ratio > median_ratio:
                    st.info(
                        f"‚ö†Ô∏è –ì–∏–ø–æ—Ç–µ–∑–∞ **–ß–ê–°–¢–ò–ß–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê**: {highest_risk_country} –∏–º–µ–µ—Ç –¥–æ–ª—é –ø—Ä–æ—Å—Ä–æ—á–µ–∫ {highest_risk_ratio}%, —á—Ç–æ –≤—ã—à–µ –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ({median_ratio}%), –Ω–æ –Ω–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ")
                else:
                    st.error(
                        f"‚ùå –ì–∏–ø–æ—Ç–µ–∑–∞ **–ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê**: {highest_risk_country} –∏–º–µ–µ—Ç –¥–æ–ª—é –ø—Ä–æ—Å—Ä–æ—á–µ–∫ {highest_risk_ratio}%, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–µ–¥–∏–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ({median_ratio}%)")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                st.write("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**")
                st.write(
                    f"- –°—Ç—Ä–∞–Ω–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º —Ä–∏—Å–∫–æ–º: {country_overdue['overdue_ratio'].idxmin()} ({country_overdue['overdue_ratio'].min()}% –ø—Ä–æ—Å—Ä–æ—á–µ–∫)")
                st.write(f"- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω: {len(country_overdue)}")
                st.write(f"- –°—Ä–µ–¥–Ω—è—è –¥–æ–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–∫: {country_overdue['overdue_ratio'].mean():.2f}%")

        else:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏.")

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º - –ò–°–ü–û–õ–¨–ó–£–ï–ú RUB
        if 'manager' in hypothesis_df.columns:
            st.subheader("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (—Å—É–º–º—ã –≤ RUB)")

            manager_stats = hypothesis_df.groupby('manager').agg(
                total_invoices=('invoice_id', 'count'),
                overdue_invoices=('is_overdue', 'sum'),
                avg_amount_rub=('amount_rub', 'mean')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É–±–ª–∏
            ).round(2)

            manager_stats['overdue_ratio'] = (manager_stats['overdue_invoices'] / manager_stats['total_invoices']) * 100
            manager_stats = manager_stats.sort_values('overdue_ratio', ascending=False)

            st.dataframe(manager_stats)

            fig3 = px.bar(manager_stats.reset_index(),
                          x='manager', y='overdue_ratio',
                          title='–î–æ–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º')
            st.plotly_chart(fig3, use_container_width=True)



        # --- –ë–õ–û–ö –¢–ê–ë–õ–ò–¶ –ò –≠–ö–°–ü–û–†–¢–ê ---
        st.header("–¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–æ–π—Å–æ–≤ —Å —Ä–∏—Å–∫–∞–º–∏")
        st.dataframe(df_filtered, use_container_width=True)



        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
        kpi_data = {
            '–û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞ (30 –¥–Ω.)': total_expected,
            '–°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏': total_overdue,
            '–î–æ–ª—è –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (%)': overdue_ratio,
            '–û–±—â–∞—è —Å—É–º–º–∞': total_amount,
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–æ–π—Å–æ–≤': len(df_filtered)
        }

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        excel_report = create_excel_report(df_filtered, kpi_data)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å Excel-–æ—Ç—á—ë—Ç",
            data=excel_report,
            file_name="export_revenue_report.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")
